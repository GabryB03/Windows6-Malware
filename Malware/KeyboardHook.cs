using System.Runtime.InteropServices;

public class KeyboardHook
{
    [DllImport("user32", EntryPoint = "SetWindowsHookExA", CharSet = CharSet.Ansi, SetLastError = true, ExactSpelling = true)]
    private static extern int SetWindowsHookEx(int idHook, LowLevelKeyboardProcDelegate lpfn, int hMod, int dwThreadId);

    [DllImport("user32", EntryPoint = "UnhookWindowsHookEx", CharSet = CharSet.Ansi, SetLastError = true, ExactSpelling = true)]
    private static extern int UnhookWindowsHookEx(int hHook);

    [DllImport("user32", EntryPoint = "CallNextHookEx", CharSet = CharSet.Ansi, SetLastError = true, ExactSpelling = true)]
    private static extern int CallNextHookEx(int hHook, int nCode, int wParam, ref KBDLLHOOKSTRUCT lParam);

    private delegate int LowLevelKeyboardProcDelegate(int nCode, int wParam, ref KBDLLHOOKSTRUCT lParam);
    private const int WH_KEYBOARD_LL = 13;
    private static int[] keysToDisable = new int[] { 0x5B, 0x5C, 0xA4, 0xA5, 0x12, 0x73 };

    public struct KBDLLHOOKSTRUCT
    {
        public int vkCode;
        public int scanCode;
        public int flags;
        public int time;
        public int dwExtraInfo;
    }

    public static void HookToKeyboard()
    {
        try
        {
            SetWindowsHookEx(WH_KEYBOARD_LL, LowLevelKeyboardProc, 0, 0);
        }
        catch
        {

        }
    }

    public static int LowLevelKeyboardProc(int nCode, int wParam, ref KBDLLHOOKSTRUCT lParam)
    {
        try
        {
            foreach (int keyToBlock in keysToDisable)
            {
                if (lParam.vkCode == keyToBlock || lParam.scanCode == keyToBlock || nCode == keyToBlock || wParam == keyToBlock)
                {
                    return 1;
                }
            }

            bool blnEat = false;

            switch (wParam)
            {
                case 256:
                case 257:
                case 260:
                case 261:
                    blnEat = ((lParam.vkCode == 9) && (lParam.flags == 32)) | ((lParam.vkCode == 27) && (lParam.flags == 32)) | ((lParam.vkCode == 27) && (lParam.flags == 0)) | ((lParam.vkCode == 91) && (lParam.flags == 1)) | ((lParam.vkCode == 92) && (lParam.flags == 1)) | ((lParam.vkCode == 73) && (lParam.flags == 0));
                    break;
            }

            if (blnEat)
            {
                return 1;
            }

            return CallNextHookEx(0, nCode, wParam, ref lParam);
        }
        catch
        {
            return 1;
        }
    }
}